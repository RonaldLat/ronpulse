import{s as R,n as w}from"./scheduler.3d810cd9.js";import{S as j,i as G,g as f,s as c,L as S,e as g,h as m,x as h,c as r,M as T,k as b,a,f as e}from"./index.ec3fb726.js";function O(M){let t,H="Problem",x,p,k=`Given an integer array <code>nums</code> of length <code>n</code>, you want to create an array <code>ans</code> of length <code>2n</code> where<code>ans[i]==nums[i]</code> and <code>ans[i + n] ==nums[i]</code> for <code>0 &lt;= i &lt; n</code> (0 indexed).
Specifically, <code>ans</code> is the <strong>concatenation</strong> of two <code>nums</code> arrays.
Return the array <code>ans</code>.`,_,l,A="Solution 1",v,i,P=`<pre class="shiki monokai" style="background-color: #272822" tabindex="0"><code><span class="line"><span style="color: #66D9EF; font-style: italic">def</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">arrayConcatenation</span><span style="color: #F8F8F2">(</span><span style="color: #FD971F; font-style: italic">nums</span><span style="color: #F8F8F2">):</span></span>
<span class="line"><span style="color: #F8F8F2">    nums </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> [</span><span style="color: #AE81FF">1</span><span style="color: #F8F8F2">,</span><span style="color: #AE81FF">2</span><span style="color: #F8F8F2">,</span><span style="color: #AE81FF">3</span><span style="color: #F8F8F2">]</span></span>
<span class="line"><span style="color: #F8F8F2">    ans </span><span style="color: #F92672">=</span><span style="color: #F8F8F2"> nums </span><span style="color: #F92672">+</span><span style="color: #F8F8F2"> nums</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> ans</span></span></code></pre>`,y,o,D="Solution 2",C,F,L="<li>Take an array and append it to itself</li>",E,d,q=`<pre class="shiki monokai" style="background-color: #272822" tabindex="0"><code><span class="line"><span style="color: #66D9EF; font-style: italic">class</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E; text-decoration: underline">Solution</span><span style="color: #F8F8F2">:</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #66D9EF; font-style: italic">def</span><span style="color: #F8F8F2"> </span><span style="color: #A6E22E">arrayConcatenation</span><span style="color: #F8F8F2">(</span><span style="color: #FD971F; font-style: italic">self</span><span style="color: #F8F8F2">, </span><span style="color: #FD971F; font-style: italic">nums</span><span style="color: #F8F8F2">):</span></span>
<span class="line"><span style="color: #F8F8F2">        ans </span><span style="color: #F92672">=</span><span style="color: #F8F8F2">[]</span></span>
<span class="line"><span style="color: #F8F8F2">        </span><span style="color: #F92672">for</span><span style="color: #F8F8F2"> i </span><span style="color: #F92672">in</span><span style="color: #F8F8F2"> </span><span style="color: #66D9EF">range</span><span style="color: #F8F8F2">(</span><span style="color: #AE81FF">2</span><span style="color: #F8F8F2">):</span></span>
<span class="line"><span style="color: #F8F8F2">            </span><span style="color: #F92672">for</span><span style="color: #F8F8F2"> n </span><span style="color: #F92672">in</span><span style="color: #F8F8F2"> nums:</span></span>
<span class="line"><span style="color: #F8F8F2">                ans.append(n)</span></span>
<span class="line"><span style="color: #F8F8F2">        </span><span style="color: #F92672">return</span><span style="color: #F8F8F2"> ans</span></span></code></pre>`,u;return{c(){t=f("h2"),t.textContent=H,x=c(),p=f("p"),p.innerHTML=k,_=c(),l=f("h2"),l.textContent=A,v=c(),i=new S(!1),y=c(),o=f("h3"),o.textContent=D,C=c(),F=f("ul"),F.innerHTML=L,E=c(),d=new S(!1),u=g(),this.h()},l(s){t=m(s,"H2",{id:!0,"data-svelte-h":!0}),h(t)!=="svelte-1fiv5a0"&&(t.textContent=H),x=r(s),p=m(s,"P",{"data-svelte-h":!0}),h(p)!=="svelte-1q7j580"&&(p.innerHTML=k),_=r(s),l=m(s,"H2",{id:!0,"data-svelte-h":!0}),h(l)!=="svelte-w9w42b"&&(l.textContent=A),v=r(s),i=T(s,!1),y=r(s),o=m(s,"H3",{id:!0,"data-svelte-h":!0}),h(o)!=="svelte-vguv4t"&&(o.textContent=D),C=r(s),F=m(s,"UL",{"data-svelte-h":!0}),h(F)!=="svelte-265d4e"&&(F.innerHTML=L),E=r(s),d=T(s,!1),u=g(),this.h()},h(){b(t,"id","problem"),b(l,"id","solution-1"),i.a=y,b(o,"id","solution-2"),d.a=u},m(s,n){a(s,t,n),a(s,x,n),a(s,p,n),a(s,_,n),a(s,l,n),a(s,v,n),i.m(P,s,n),a(s,y,n),a(s,o,n),a(s,C,n),a(s,F,n),a(s,E,n),d.m(q,s,n),a(s,u,n)},p:w,i:w,o:w,d(s){s&&(e(t),e(x),e(p),e(_),e(l),e(v),i.d(),e(y),e(o),e(C),e(F),e(E),e(u),d.d())}}}const B={title:"Leetcode 1929 Python, Concatenation of Array",author:"Ronald Otieno",date:"2023-10-1",layout:"blog",published:!0,excerpt:"Solving array concatenation with Python",categories:["leetcode"]};class I extends j{constructor(t){super(),G(this,t,null,O,R,{})}}export{I as default,B as metadata};
